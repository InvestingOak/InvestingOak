// <auto-generated />
using System;
using InvestingOak.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace InvestingOak.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201023215527_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.0-rc.1.20451.13");

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("TEXT");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("InvestingOak.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("InvestingOak.Data.Entities.ArticleList", b =>
                {
                    b.Property<string>("Category")
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.HasKey("Category", "Symbol");

                    b.ToTable("NewsArticles");
                });

            modelBuilder.Entity("InvestingOak.Data.Entities.CompanyProfile", b =>
                {
                    b.Property<string>("Symbol")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("AnalystTargetPrice")
                        .HasColumnType("TEXT");

                    b.Property<string>("AssetType")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Beta")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("BookValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<string>("Currency")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DilutedEPSTTM")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("DividendDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DividendPerShare")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DividendYear")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("EBITDA")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("EVToEBITDA")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("EVToRevenue")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("EarningsPerShare")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("ExDividendDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Exchange")
                        .HasColumnType("TEXT");

                    b.Property<string>("FiscalYearEnd")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ForwardAnnualDividendRate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ForwardAnnualDividendYield")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ForwardPE")
                        .HasColumnType("TEXT");

                    b.Property<long>("FullTimeEmployees")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("GrossProfitTTM")
                        .HasColumnType("TEXT");

                    b.Property<string>("Industry")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastSplitDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastSplitFactor")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LatestQuarter")
                        .HasColumnType("TEXT");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MarketCapitalization")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MovingAverageDaily200")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MovingAverageDaily50")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("OperatingMarginTTM")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PEGRatio")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PERatio")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PayoutRatio")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PercentInsiders")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PercentInstitutions")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PriceToBookRatio")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PriceToSalesRatioTTM")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ProfitMargin")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("QuarterlyEarningsGrowthYOY")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("QuarterlyRevenueGrowthYOY")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ReturnOnAssetsTTM")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ReturnOnEquityTTM")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("RevenuePerShareTTM")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("RevenueTTM")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sector")
                        .HasColumnType("TEXT");

                    b.Property<long>("SharesFloat")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SharesOutstanding")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SharesShort")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SharesShortPriorMonth")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ShortPercentFloat")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ShortPercentOutstanding")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ShortRatio")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TrailingPE")
                        .HasColumnType("TEXT");

                    b.Property<string>("WebUrl")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("WeekHigh52")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("WeekLow52")
                        .HasColumnType("TEXT");

                    b.HasKey("Symbol");

                    b.ToTable("CompanyProfiles");
                });

            modelBuilder.Entity("InvestingOak.Data.Entities.NewsArticle", b =>
                {
                    b.Property<int>("ArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ArticleListCategory")
                        .HasColumnType("TEXT");

                    b.Property<string>("ArticleListSymbol")
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .HasColumnType("TEXT");

                    b.Property<uint>("DateTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Headline")
                        .HasColumnType("TEXT");

                    b.Property<uint>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Related")
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .HasColumnType("TEXT");

                    b.Property<string>("Summary")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("ArticleId");

                    b.HasIndex("ArticleListCategory", "ArticleListSymbol");

                    b.ToTable("NewsArticle");
                });

            modelBuilder.Entity("InvestingOak.Data.Entities.PriceTargets", b =>
                {
                    b.Property<string>("Symbol")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Period")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TargetHigh")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TargetLow")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TargetMean")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TargetMedian")
                        .HasColumnType("TEXT");

                    b.HasKey("Symbol");

                    b.ToTable("PriceTargets");
                });

            modelBuilder.Entity("InvestingOak.Data.Entities.Quote", b =>
                {
                    b.Property<string>("Symbol")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Close")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("High")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Low")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Open")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PreviousClose")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("Volume")
                        .HasColumnType("INTEGER");

                    b.HasKey("Symbol");

                    b.ToTable("Quotes");
                });

            modelBuilder.Entity("InvestingOak.Data.Entities.Recommendations", b =>
                {
                    b.Property<string>("Symbol")
                        .HasColumnType("TEXT");

                    b.Property<uint>("Buy")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Hold")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Period")
                        .HasColumnType("TEXT");

                    b.Property<uint>("Sell")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("StrongBuy")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("StrongSell")
                        .HasColumnType("INTEGER");

                    b.HasKey("Symbol");

                    b.ToTable("Recommendations");
                });

            modelBuilder.Entity("InvestingOak.Data.Entities.Sentiment", b =>
                {
                    b.Property<string>("Symbol")
                        .HasColumnType("TEXT");

                    b.Property<uint>("ArticlesInLastWeek")
                        .HasColumnType("INTEGER");

                    b.Property<double>("BearishPercent")
                        .HasColumnType("REAL");

                    b.Property<double>("BullishPercent")
                        .HasColumnType("REAL");

                    b.Property<double>("Buzz")
                        .HasColumnType("REAL");

                    b.Property<double>("CompanyNewsScore")
                        .HasColumnType("REAL");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<double>("SectorAverageBullishPercent")
                        .HasColumnType("REAL");

                    b.Property<double>("SectorAverageNewsScore")
                        .HasColumnType("REAL");

                    b.Property<double>("WeeklyAverage")
                        .HasColumnType("REAL");

                    b.HasKey("Symbol");

                    b.ToTable("Sentiments");
                });

            modelBuilder.Entity("InvestingOak.Data.Entities.StockSymbol", b =>
                {
                    b.Property<string>("Symbol")
                        .HasColumnType("TEXT");

                    b.Property<string>("Currency")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplaySymbol")
                        .HasColumnType("TEXT");

                    b.Property<string>("SymbolListExchange")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("Symbol");

                    b.HasIndex("SymbolListExchange");

                    b.ToTable("StockSymbol");
                });

            modelBuilder.Entity("InvestingOak.Data.Entities.SymbolList", b =>
                {
                    b.Property<string>("Exchange")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.HasKey("Exchange");

                    b.ToTable("SymbolLists");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("InvestingOak.Data.Entities.NewsArticle", b =>
                {
                    b.HasOne("InvestingOak.Data.Entities.ArticleList", null)
                        .WithMany("Articles")
                        .HasForeignKey("ArticleListCategory", "ArticleListSymbol");
                });

            modelBuilder.Entity("InvestingOak.Data.Entities.StockSymbol", b =>
                {
                    b.HasOne("InvestingOak.Data.Entities.SymbolList", null)
                        .WithMany("Symbols")
                        .HasForeignKey("SymbolListExchange");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("InvestingOak.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("InvestingOak.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvestingOak.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("InvestingOak.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InvestingOak.Data.Entities.ArticleList", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("InvestingOak.Data.Entities.SymbolList", b =>
                {
                    b.Navigation("Symbols");
                });
#pragma warning restore 612, 618
        }
    }
}
